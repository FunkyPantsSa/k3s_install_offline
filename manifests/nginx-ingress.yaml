---

# default backend ingress rule , block all illegal domain
apiVersion:  extensions/v1beta1
kind: Ingress
metadata:
  name: default-backend
  namespace: ingress-nginx
spec:
 backend:
  serviceName: nginx-ingress-default-backend
  servicePort: 80

---
# Source: nginx-ingress/templates/controller-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    component: "controller"
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress-controller
data:
  client-header-buffer-size: 512k
  enable-vts-status: "false"
  large-client-header-buffers: 4 512k
  log-format-upstream: '{"@timestamp":"$time_iso8601","host":"$server_addr", "clientip"
    : "$remote_addr", "size" : "$body_bytes_sent" ,"requesttime":"$request_time","upstremtime":"$upstream_response_time","upstremhost":"$upstream_addr","httphost":"$host","referer":"$http_referer","xff":"$http_x_forwarded_for","agent":"$http_user_agent","clientip":"$remote_addr","request":"$request","uri":"$uri","status":"$status"}'
  ### 设置 body 大小
  proxy-body-size: 20m
  worker-processes: "4"

---
# Source: nginx-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress
---
# Source: nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: ingress-nginx
---
# Source: nginx-ingress/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: nginx-ingress/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: ingress-nginx
---
# Source: nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    component: "controller"
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress-controller
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: 20080
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      nodePort: 20443
  selector:
    app: nginx-ingress
    component: "controller"
    release: nginx-ingress
  type: "NodePort"

---
# Source: nginx-ingress/templates/default-backend-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    component: "default-backend"
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress-default-backend
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: nginx-ingress
    component: "default-backend"
    release: nginx-ingress
  type: "ClusterIP"

---
# Source: nginx-ingress/templates/controller-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
# kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    component: "controller"
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress-controller
spec:
  selector:
    matchLabels:
      app: nginx-ingress
  revisionHistoryLimit: 10
  updateStrategy:
    {}

  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "controller"
        release: nginx-ingress
    spec:
      dnsPolicy: ClusterFirst
      hostNetwork: true
      containers:
        - name: nginx-ingress-controller
          #image: "tangx/nginx-ingress-controller:0.25.1"
          image: "hub-dev.rockontrol.com/docker.io/rancher/nginx-ingress-controller:nginx-0.25.1-rancher1"
          imagePullPolicy: "IfNotPresent"
          args:
            - /nginx-ingress-controller
            - --default-backend-service=ingress-nginx/nginx-ingress-default-backend
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=ingress-nginx/nginx-ingress-controller
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 33
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              hostPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              hostPort: 443
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {}

      hostNetwork: false
      serviceAccountName: nginx-ingress
      terminationGracePeriodSeconds: 60

---
# Source: nginx-ingress/templates/default-backend-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.17.1
    component: "default-backend"
    heritage: Tiller
    release: nginx-ingress
  name: nginx-ingress-default-backend
spec:
  selector:
    matchLabels:
      app: nginx-ingress
  replicas: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "default-backend"
        release: nginx-ingress
    spec:
      containers:
        - name: nginx-ingress-default-backend
          #image: "tangx/defaultbackend-amd64:1.5"
          image: "hub-dev.rockontrol.com/docker.io/rancher/nginx-ingress-controller-defaultbackend:1.5-rancher1"
          imagePullPolicy: "IfNotPresent"
          args:
          securityContext:
            runAsUser: 65534
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}

      terminationGracePeriodSeconds: 60

---
# Source: nginx-ingress/templates/addheaders-configmap.yaml


---
# Source: nginx-ingress/templates/controller-deployment.yaml


---
# Source: nginx-ingress/templates/controller-hpa.yaml


---
# Source: nginx-ingress/templates/controller-metrics-service.yaml


---
# Source: nginx-ingress/templates/controller-poddisruptionbudget.yaml


---
# Source: nginx-ingress/templates/controller-prometheusrules.yaml


---
# Source: nginx-ingress/templates/controller-servicemonitor.yaml


---
# Source: nginx-ingress/templates/default-backend-poddisruptionbudget.yaml


---
# Source: nginx-ingress/templates/podsecuritypolicy.yaml


---
# Source: nginx-ingress/templates/proxyheaders-configmap.yaml


---
# Source: nginx-ingress/templates/tcp-configmap.yaml


---
# Source: nginx-ingress/templates/udp-configmap.yaml
